#!/usr/bin/env ruby
#  
#  Copyright 2006-2011 Stanislav Senotrusov <stan@senotrusov.com>
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


# I encountered functions and classes once. They look strange.


# Parse command-line arguments
#
# workety -e development start Workety::TestThread --foo=bar
#                        ^^^^^ Start as daemon 
#         ^^^^^^^^^^^^^^ Options for Workety       ^^^^^^^^^ Options for class (parsed by class)
#
#
# workety Workety::TestThread
#   Runs test thread in console 
#
require 'trollop'

options = Trollop::options do
  opt :environment, "Run in environment (development/production/testing)", :type => :string

  opt :user, "Run as user", :type => :string
  opt :group, "Run as group", :type => :string

  opt :name, "Logfile and pidfile name", :type => :string
  opt :log, "Logfile name (default to class_name)", :type => :string
  opt :log_level, "Log level (debug, info, warn, error, fatal)", :type => :string 
  opt :pid, "Pidfile name (default to class_name)", :type => :string
  
  opt :no_watchdog, "Do not watch and restart daemon", :type => :boolean
  
  stop_on_unknown
end

action = case ARGV.first
  when /start/i
    ARGV.shift
    options[:environment] ||= "production"
    :start
  when /stop/i
    ARGV.shift
    options[:environment] ||= "production"
    :stop
  else
    options[:environment] ||= "development"
    :console
  end

ENV['RAILS_ENV'] ||= options[:environment]

unless class_name = ARGV.shift
  Trollop::die "need class name"
end


# Define pid and log file name
# 
pidfile = "tmp/pids/#{options[:name] || options[:pid] || class_name}.pid"
logfile = "log/#{options[:name] || options[:log] || class_name}.log"


# Do stop action and exit
#
WORKETY_STOP_TICK = 0.05
WORKETY_STOP_NOTICE = 5
WORKETY_STOP_WARNING = 55
WORKETY_STOP_KILL = 60
WORKETY_STOP_SELF_WATCHDOG_TIMEOUT = 65

if action == :stop
  begin
    pid = File.read(pidfile).to_i
    Process.kill(:TERM, pid)
    
    begin
      noticd = false
      warned = false
      killed = false
      forced = false
      
      slept = 0
      
      while Process.getpgid(pid) # Raise Errno::ESRCH if process not found
        
        sleep WORKETY_STOP_TICK
        slept += WORKETY_STOP_TICK
        
        # Notice the operator and send USR1 signal to log running threads
        if !noticd && slept >= WORKETY_STOP_NOTICE
          STDOUT.puts "\n#{WORKETY_STOP_NOTICE} seconds notice timeout reached"
          
          STDOUT.puts "\nSending USR1 signal to log list of running threads"
          Process.kill(:USR1, pid)
          
          STDOUT.puts "USR2 as a warning signal will be sent after #{WORKETY_STOP_WARNING} seconds from the first TERM"
          STDOUT.puts "KILL signal will be sent after #{WORKETY_STOP_KILL} seconds from the first TERM"
          
          STDOUT.puts "\nPress <Ctrl>c to cancel or <Ctrl>d to force USR2 signal and the following KILL signal within #{WORKETY_STOP_KILL - WORKETY_STOP_WARNING} seconds"

          noticd = true
        end
        
        # Send USR2 as a warning
        if !warned && slept >= WORKETY_STOP_WARNING
          STDOUT.puts "\nSending USR2 signal as a warning before KILL"
          Process.kill(:USR2, pid)
          warned = true
        end
        
        # Send KILL
        if !killed && slept >= WORKETY_STOP_KILL
          STDOUT.puts "\nSending KILL signal"
          Process.kill(:KILL, pid)
          killed = true
        end
        
        # Check for <Ctrl>d
        if !forced && slept < WORKETY_STOP_WARNING
          begin
            STDIN.read_nonblock(100)
          rescue Errno::EAGAIN
            # Resource temporarily unavailable - it's ok, retrying
          rescue EOFError
            # Operator pressed <Ctrl>d
            forced = true
            slept = WORKETY_STOP_WARNING
          end
        end
        
      end # while
      
    # Process is no longer alive
    rescue Errno::ESRCH
      STDOUT.puts "Shutdown successfull"
      Process.exit true

    # Operator pressed <Ctrl>c and cancels force shutdown
    rescue Interrupt
      Process.exit false 
    end
  
  rescue Errno::ENOENT
    STDERR.puts "ERROR: Pidfile #{pidfile} does not exists"
    Process.exit false

  rescue Errno::ESRCH
    STDERR.puts "ERROR: Process with pid #{pid} does not running" 
    Process.exit false
  end
end


# Below that line prefer STDOUT.write "foo\n" instead of puts
#
# Current ruby puts implementation make two write syscals - one for string and one (if needed) for record separator (a newline).
# When writing to file (logfile on our case) concurrently it may intermix strings with separators like "ab\n\n".


# Detach from terminal when running as a daemon (start action)
#
if action == :start
  # based on Reimer Behrends notes
  # http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/87467
  Process.exit!(true) if fork  # Parent exits, child continues.
  Process.setsid               # Become session leader.
  Process.exit!(true) if fork  # Zap session leader. See http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
  
  # Is there any point to set umask here?
  # File.umask 022             # Default permissions will be 644 for files and 755 for directories
  
  STDIN.reopen "/dev/null"

  STDOUT.reopen(logfile, "a")
  STDOUT.sync = true

  STDERR.reopen STDOUT
end


# Check - are process is already running?
#
if File.exists?(pidfile)
  begin
    Process.getpgid(pid = File.read(pidfile).to_i)
    # STDERR.write "ERROR: Process is already running with pid #{pid}\n"
    # Process.exit false
    STDERR.write "WARNING: Found pidfile #{pidfile} with pid #{pid} and a process running with that pid\n"
  rescue Errno::ENOENT
    # Do nothing
  rescue Errno::ESRCH
    STDERR.write "WARNING: Found pidfile #{pidfile} with pid #{pid}, it may be the result of an unclean shutdown\n"
  end
end


# Write pid to file and define at_exit handler for pidfile deletion  
#
File.open(pidfile, 'w') do |file|
  file.write Process.pid
end

delete_pidfile = true
at_exit { File.delete(pidfile) if delete_pidfile }


# Watchdog process if needed
#
WORKETY_RESTART_DELAY = 5

module Signal
  # Signal received by watchdog is propogated to child by this helper method
  def self.propagate(pid, signal, out_signal = nil)
    out_signal ||= signal
    trap(signal) do
      begin
        yield if block_given?
        Process.kill(out_signal, pid)
      rescue Errno::ESRCH
        # Process with pid #{pid} does not running
      end
    end
  end
end

if action == :start && !options[:no_watchdog]

  must_stop = false
  
  loop do
    # There is a need to reseed random number generators after each fork.
    # Fortunately, ruby developers already do this for us, as I get from http://redmine.ruby-lang.org/issues/4579
    if (child_pid = fork)
      # Parent restarts child and propagate signals to him.

      Signal.propagate(child_pid, :INT)  { must_stop = true }
      Signal.propagate(child_pid, :TERM) { must_stop = true }
      Signal.propagate(child_pid, :USR1)
      Signal.propagate(child_pid, :USR2, :KILL) { must_stop = true }
      
      Process.wait(child_pid)
      
      STDOUT.write "Child #{child_pid} exited " + 
        ($?.exited? ? "normally with status #{$?.exitstatus}" : "abnormally") +
        ($?.signaled? ? " because of an uncaught signal #{$?.termsig}" : "") +
        ($?.coredump? ? " and coredump" : "") + "\n"

      if must_stop || $?.exitstatus == 0
        STDOUT.write "Terminating\n"
        Process.exit(true)
      end
        
      # Clear signal handlers in order that newly forked children did not inherit watchdog handlers
      Signal.trap(:INT,  "DEFAULT")
      Signal.trap(:TERM, "DEFAULT")
      Signal.trap(:USR1, "IGNORE")
      Signal.trap(:USR2, "DEFAULT")

    else
      # Children breaks to initialize and run
      delete_pidfile = false
      break
    end

    STDOUT.write "Restarting after #{WORKETY_RESTART_DELAY} seconds\n"
    sleep WORKETY_RESTART_DELAY
  end
end

  
# Load bundler, rails framework, rails application, initialize logger
#
# This will load bundler, rails framework and define application configuration class
require File.expand_path('config/application')

Rails.configuration.autoload_paths.push "#{Rails.configuration.root}/app/workety"

if action == :console
  Rails.logger = ActiveSupport::BufferedLogger.new(STDOUT)
  Rails.logger.level = ActiveSupport::BufferedLogger.const_get(options[:log_level].upcase) if options[:log_level]
else
  Rails.configuration.paths.log logfile
  Rails.configuration.log_level = options[:log_level].downcase.to_sym if options[:log_level]
end

ActiveSupport::BufferedLogger.class_eval do
  def chown_logfile(user_uid, group_gid)
    @log.chown(user_uid, group_gid) if @log.respond_to?(:chown)
  end
end

# This will initialize Rails application, load all the application classes 
require File.expand_path('config/environment')

# This will initialize ActiveRecord for multithreaded applications
# If two threads will call ActiveRecord::Base for the first time simultaneously, it will lead to some surprise exceptions 
ActiveRecord::Base if defined?(ActiveRecord::Base)

Rails.logger.auto_flushing = true
Rails.logger.flush

at_exit { Rails.logger.flush }


# Handling stop signals
# 
# If signal handler was called second time while the first is still running,
# then mutex inside that handler will lead to deadlock (recursive locking, ThreadError)
# as all handling occurs in main thread. To avoid that signal handler spawns new thread
# which take care of stopping the process 
#
Signal.threaded_trap(:INT)  { Workety.stop } # Ctrl+C
Signal.threaded_trap(:TERM) { Workety.stop } # kill
Signal.threaded_trap(:USR1) { Thread.log }   # USR1 signal to display list of running thread and their backtraces
Signal.trap(:USR2, "IGNORE")                 # USR2 signal used as a warning before KILL signal


# Watchdog thread will shutdown process if parent process is gone
#
if action == :start && !options[:no_watchdog]
  Thread.rescue_exit do
    sleep 30 until Process.ppid == 1
    Rails.logger.fatal "Parent process is missing, terminating"
    Workety.stop
  end
end


# TODO: proper test environment
# require "workety/test/test_thread.rb" if class_name == "Workety::TestThread"


# Start the worker
#
Workety.start class_name, options[:user], options[:group]
Workety.join

Process.exit(!Workety.aborted?)

